plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

def mapsApiKey = [
    project.hasProperty('MAPS_API_KEY') ? project.property('MAPS_API_KEY') : null,
    localProperties.getProperty('MAPS_API_KEY'),
    System.getenv('MAPS_API_KEY')
].find { candidate ->
    candidate != null && !candidate.toString().trim().isEmpty()
}
if (mapsApiKey == null) {
    logger.warn("MAPS_API_KEY is not defined. Google Maps will not load without a valid key.")
    mapsApiKey = ""
} else {
    mapsApiKey = mapsApiKey.toString()
}


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
def hasReleaseKeystore = keystorePropertiesFile.exists()
if (hasReleaseKeystore) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.mycompany.CounterApp"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    signingConfigs {
        if (hasReleaseKeystore) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.mycompany.CounterApp"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        manifestPlaceholders = (manifestPlaceholders ?: [:]) + [MAPS_API_KEY: mapsApiKey]
    }

    buildTypes {
        release {
            // Use the configured release keystore when available, otherwise fall back to the
            // debug signing config so development builds continue to work.
            signingConfig = hasReleaseKeystore ? signingConfigs.release : signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}